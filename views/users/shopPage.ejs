<%- include('../layouts/header.ejs') %>
<style>
	.category-item {
    display: block;
    margin-bottom: 5px; /* Adjust margin as needed */
}

</style>

		<!--start page wrapper -->
		<div class="page-wrapper">
			
			<div class="page-content">
				<!--start breadcrumb-->
				<section class="py-3 border-bottom border-top d-none d-md-flex bg-light">
					<div class="container">
						<div class="page-breadcrumb d-flex align-items-center">
							<h3 class="breadcrumb-title pe-3">Shop Grid Left Sidebar</h3>
							<div class="ms-auto">
								<nav aria-label="breadcrumb">
									<ol class="breadcrumb mb-0 p-0">
										<li class="breadcrumb-item"><a href="javascript:;"><i class="bx bx-home-alt"></i> Home</a>
										</li>
										<li class="breadcrumb-item"><a href="javascript:;">Shop</a>
										</li>
										<li class="breadcrumb-item active" aria-current="page">Shop Left Sidebar</li>
									</ol>
								</nav>
							</div>
						</div>
					</div>
				</section>
				<!--end breadcrumb-->
				<!--start shop area-->
				<section class="py-4">
					<div class="container">
						<div class="btn btn-dark btn-ecomm d-xl-none position-fixed top-50 start-0 translate-middle-y z-index-1"  data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbarFilter"><span><i class='bx bx-filter-alt me-1'></i>Filters</span></div>
						<div class="row">
							<div class="col-12 col-xl-3 filter-column">
								<nav class="navbar navbar-expand-xl flex-wrap p-0">
								  <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasNavbarFilter" aria-labelledby="offcanvasNavbarFilterLabel">
									<div class="offcanvas-header">
									  <h5 class="offcanvas-title mb-0 fw-bold" id="offcanvasNavbarFilterLabel">Filters</h5>
									  <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
									</div>
									<div class="offcanvas-body">
									  <div class="filter-sidebar">
										<div class="card rounded-0 shadow-none border">
										  <div class="card-header d-none d-xl-block bg-transparent">
											  <h5 class="mb-0 fw-bold">Filters</h5>
										  </div>
										  <div class="card-body">
											<h6 class="p-1 fw-bold bg-light">Categories</h6>
											<div class="categories">
												<div class="categories-wrapper height-1 p-1">
													<form id="categoryForm">
														<% catData.forEach(function(cat) { %>
															<div class="category-item">
																<input type="checkbox" class="category-checkbox" id="<%= cat._id %>" value="<%= cat._id %>">
																<label for="<%= cat._id %>"><%= cat.categoryName %></label>
															</div>
														<% }); %>

														<div class="Price">
															<h6 class="p-1 fw-bold bg-light">Price</h6>
															 <div class="Price-wrapper p-1">
															  <div class="input-group">
																  <input type="text" class="form-control rounded-0" placeholder="Initial Price" id="initialPriceInput">
																  <span class="input-group-text bg-section-1 border-0">-</span>
																  <input type="text" class="form-control rounded-0" placeholder="Upper Price" id="upperPriceInput">
																  
															  </div>
															  
															  
															 </div>
														   </div>
														   <hr>
														  
														<button type="button" id="filterButton" class="btn btn-success btn-sm">Apply Filter</button>
													</form>
													<br>
													
													
												</div>
												<div class="d-flex align-items-center flex-nowrap">
													<select id="sortSelect" class="form-select rounded-0">
														<option value="menu_order">Default sorting</option>
														<option value="price">Sort by price: low to high</option>
														<option value="price-desc">Sort by price: high to low</option>
													</select>
												</div>
												
											</div>
											
											
											<hr>
											
											 
											
										</div>
									  </div>
									</div>
								  </div>
							  </nav>
							</div>
							<div class="col-12 col-xl-9">
								<div class="product-wrapper">
									
									<div class="product-grid">
										<div id="productContainer" class="row row-cols-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3 row-cols-xxl-3 g-3 g-sm-4">
											
											<% proData.forEach(function(pro) { %>
												<div class="col">
													<div class="card">
														<div class="position-relative overflow-hidden">
															<div class="add-cart position-absolute top-0 end-0 mt-3 me-3">
																<a href="javascript:;"><i class='bx bx-cart-add' ></i></a>
															</div>
															<div class="quick-view position-absolute start-0 bottom-0 end-0">
																<a href="#" data-bs-toggle="modal" data-bs-target="#QuickViewProduct">Quick View</a>
															</div>
															<a href="/home-pro/<%=pro._id%>">
																<img src="products/<%=pro.productImages[0]%>" class="img-fluid" alt="...">
															</a>
														</div>
														<div class="card-body px-0">
															<div class="d-flex align-items-center justify-content-between">
																<div class="">
																	<p class="mb-1 product-short-name"><%=pro.categoryName%></p>
																	<h6 class="mb-0 fw-bold product-short-title"><%=pro.productName%></h6>
																</div>
																<div class="icon-wishlist">
																	<a href="javascript:;"><i class="bx bx-heart"></i></a>
																</div>
															</div>
															
															<div class="product-price d-flex align-items-center justify-content-start gap-2 mt-2">
																<div class="h6 fw-light fw-bold text-secondary text-decoration-line-through"></div>
																<div class="h6 fw-bold"><%=pro.price%></div>
															</div>
														</div>
													</div>
												</div>
											<% }); %>
										
										</div><!--end row-->
									</div>
									<div id="productContainer" class="row">
										<!-- Products will be dynamically rendered here -->
									</div>
									
									
									<hr>
									<nav aria-label="Page navigation example">
										<ul class="pagination justify-content-start">
											<% for (let i = 1; i <= totalPages; i++) { %>
												<li class="page-item <%= currentPage === i ? 'active' : '' %>">
													<a class="page-link" href="?page=<%= i %>"><%= i %></a>
												</li>
											<% } %>
										</ul>
									</nav>
								</div>
							</div>
						</div>
						<!--end row-->
					</div>
				</section>
				<!--end shop area-->
			</div>
		</div>
		<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
		<script>
	


	document.addEventListener("DOMContentLoaded", async function() {

		try {

			console.log("koooo")
        // Fetch all products from the server
        const response = await fetch(`/all-products`);
        const products = await response.json();

        // Render the products on the page
        renderProducts(products);
    } catch (error) {
        console.error('Error fetching products:', error);
    }
    


        const filterButton = document.getElementById('filterButton');
        const sortSelect = document.getElementById("sortSelect");

        // Event listener for the filter button
        filterButton.addEventListener('click', async function() {
            try {
                const selectedCategories = Array.from(document.querySelectorAll('.category-checkbox:checked')).map(checkbox => checkbox.value);
                const initialPrice = parseFloat(document.getElementById('initialPriceInput').value);
                const upperPrice = parseFloat(document.getElementById('upperPriceInput').value);

                // Construct the categories query parameter
                const categoriesParam = selectedCategories.join(',');

                const queryParams = new URLSearchParams();
                queryParams.append('categories', categoriesParam);
                queryParams.append('initialPrice', initialPrice);
                queryParams.append('upperPrice', upperPrice);

                // Fetch data from the server
                const response = await fetch(`/filterAndSortProducts?${queryParams.toString()}`);
                const products = await response.json();

                // Render the filtered products
                renderProducts(products);
            } catch (error) {
                console.error('Error fetching and filtering products:', error);
            }
        });

        // Event listener for the sort select element
        sortSelect.addEventListener("change", async function() {
            const selectedSortOption = this.value;
            console.log("Selected sort option:", selectedSortOption);

            try {
                const selectedCategories = Array.from(document.querySelectorAll('.category-checkbox:checked')).map(checkbox => checkbox.value);
                const initialPrice = parseFloat(document.getElementById('initialPriceInput').value);
                const upperPrice = parseFloat(document.getElementById('upperPriceInput').value);

                // Construct the categories query parameter
                const categoriesParam = selectedCategories.join(',');

                // Construct the query parameters including sorting option
                const queryParams = new URLSearchParams();
                queryParams.append('categories', categoriesParam);
                queryParams.append('initialPrice', initialPrice);
                queryParams.append('upperPrice', upperPrice);
                queryParams.append('sortOption', selectedSortOption);

                const response = await fetch(`/sort-data?${queryParams.toString()}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const sortedProducts = await response.json();
                console.log("Sorted products:", sortedProducts);
                // Render the sorted products
                renderProducts(sortedProducts);
            } catch (error) {
                console.error('Error sorting products:', error);
            }
        });
    




	function renderProducts(products) {
					const productContainer = document.getElementById('productContainer');
					productContainer.innerHTML = '';
		
					products.forEach(product => {
						const productCard = `
							<div class="col">
								<div class="position-relative overflow-hidden">
										<div class="add-cart position-absolute top-0 end-0 mt-3 me-3">
											<a href="javascript:;"><i class='bx bx-cart-add'></i></a>
										</div>
										<div class="quick-view position-absolute start-0 bottom-0 end-0">
											<a href="#" data-bs-toggle="modal" data-bs-target="#QuickViewProduct">Quick View</a>
										</div>
										<a href="/home-pro/${product._id}">
											<img src="products/${product.productImages[0]}" class="img-fluid" alt="...">
										</a>
									</div>
									<div class="card-body px-0">
										<div class="d-flex align-items-center justify-content-between">
											<div>
												<p class="mb-1 product-short-name">${product.categoryName}</p>
												<h6 class="mb-0 fw-bold product-short-title">${product.productName}</h6>
											</div>
											<div class="icon-wishlist">
												<a href="javascript:;"><i class="bx bx-heart"></i></a>
											</div>
										</div>
										
										<div class="product-price d-flex align-items-center justify-content-start gap-2 mt-2">
											<div class="h6 fw-light fw-bold text-secondary text-decoration-line-through"></div>
											<div class="h6 fw-bold">Price: ${product.price} INR</div>
										</div>
									</div>
								</div>
							</div>
						`;
						productContainer.innerHTML += productCard;
					});
				}
			
});



		
				
		</script>
		
			
		
		
		
		<!--end page wrapper -->
		<%- include('../layouts/footer.ejs') %>
		